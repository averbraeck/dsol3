package nl.tudelft.simulation.introspection.gui;

import javax.swing.table.TableModel;

import nl.tudelft.simulation.introspection.Introspector;
import nl.tudelft.simulation.introspection.Property;

/**
 * Defines the minimum contract for a TableModel providing additional introspection services. The contract is used to
 * facilitate communication between an {see ObjectJTable}and an introspecting TableModel, especially to allow an
 * ObjectJTable to create additional ObjectJTable instances.
 * <p>
 * copyright (c) 2002-2018  <a href="https://simulation.tudelft.nl">Delft University of Technology</a>. <br>
 * BSD-style license. See <a href="https://simulation.tudelft.nl/dsol/3.0/license.html">DSOL License</a>. <br>
 * @author <a href="https://www.linkedin.com/in/peterhmjacobs">Peter Jacobs</a>.
 * @author <a href="http://www.tbm.tudelft.nl/averbraeck">Alexander Verbraeck</a>.
 * @author Niels Lang.
 * @since 1.5
 */
public interface IntrospectingTableModelInterface extends TableModel
{
    /**
     * Returns the Property instance generated by this IntrospectingTableModelInterface for the property 'propertyName'.
     * @param propertyName The name of the Property to be returned
     * @return The Property corresponding to 'propertyName', null if the property could not be found.
     */
    Property getProperty(String propertyName);

    /**
     * @return The introspector instance used by this introspecting TableModel.
     */
    Introspector getIntrospector();

    /**
     * gets the class of the the object at row,column.
     * @param rowIndex the rowNumber
     * @param columnIndex the columnNumber
     * @return The type of the value in cell 'rowIndex', 'columnIndex'
     */
    Class<?> getTypeAt(int rowIndex, int columnIndex);

    /**
     * Returns a reference to this model's modelManager, {see ModelManager}.
     * @return the model manager
     */
    ModelManager getModelManager();
}
